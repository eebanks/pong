# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
ball_pos = [WIDTH / 2, HEIGHT / 2]
ball_vel = [0, 0] # pixels per update (1/60 seconds)
hort = 0
vert = 0
#left hand paddle
paddle1_pos = (HEIGHT / 2) - HALF_PAD_HEIGHT
paddle1_vel = 0
#right hand paddle
paddle2_pos = (HEIGHT / 2) - HALF_PAD_HEIGHT
paddle2_vel = 0
score_left = 0
score_right = 0
# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel, hort, vert # these are vectors stored as lists
    hort = random.randrange(2, 4)
    vert = random.randrange(1, 3)
    ball_pos = ball_pos
    ball_vel = [0, 0]
    if direction == RIGHT:
        ball_pos = [WIDTH / 2, HEIGHT / 2]
        ball_vel = [hort, -vert]
    else:
        ball_pos = [WIDTH / 2, HEIGHT / 2]
        ball_vel = [-hort, -vert]
         
# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    spawn_ball(LEFT)
    

def draw(canvas):
    global score_left, score_right, paddle1_pos, paddle2_pos, ball_pos, ball_vel
    
    #collision with bottom wall 
    if ball_pos[1] >= (HEIGHT-1) - BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    #collision with top wall
    if ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    #collision with right gutter, left gutter respectively
    if ball_pos[0] >= ((WIDTH-PAD_WIDTH)-1)-BALL_RADIUS:
        if ball_pos[1] >= paddle2_pos-PAD_HEIGHT and ball_pos[1] <= paddle2_pos +PAD_HEIGHT:
            ball_vel[0] = -ball_vel[0] *1.1
        else:
            score_left += 1
            spawn_ball(LEFT)
    elif ball_pos[0] <= (BALL_RADIUS + PAD_WIDTH) :
        if ball_pos[1] >= paddle1_pos-PAD_HEIGHT and ball_pos[1] <= paddle1_pos +PAD_HEIGHT: 
            ball_vel[0] = - ball_vel[0] * 1.1
        else:
            score_right += 1
            spawn_ball(RIGHT)
    

      
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_text(str(score_left), [180,100], 48, "White")    
    canvas.draw_text(str(score_right), [400, 100], 48, "White")
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]       
    
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 2, "White", "White") 
    # update paddle's vertical position, keep paddle on the screen  
    if paddle2_pos + paddle2_vel >= 0 and paddle2_pos + paddle2_vel <= (HEIGHT - PAD_HEIGHT):
        paddle2_pos += paddle2_vel
    if paddle1_pos + paddle1_vel >= 0 and paddle1_pos + paddle1_vel <= (HEIGHT - PAD_HEIGHT):
        paddle1_pos += paddle1_vel
    
    # draw paddles
    canvas.draw_line([4, paddle1_pos], [4, paddle1_pos + PAD_HEIGHT ], PAD_WIDTH, 'White')
    canvas.draw_line([596, paddle2_pos], [596, paddle2_pos + PAD_HEIGHT ], PAD_WIDTH, 'White') 

def button_restart():
    global score_left, score_right
    score_left = 0
    score_right = 0
    new_game()
    
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 5
    elif key == simplegui.KEY_MAP["up"]:
        paddle2_vel = -5
    elif key == simplegui.KEY_MAP["w"]:
        paddle1_vel = -5
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 5

def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 0
    elif key == simplegui.KEY_MAP["up"]:
        paddle2_vel = 0
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP["w"]:
        paddle1_vel = 0

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("REStart Game", button_restart)


# start frame
new_game()
frame.start()
